plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.liquibase.gradle' version '2.2.0'
}

group = 'lb.store'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

ext {
    springCloudAzureVersion = '5.3.0'
    mapstructVersion = '1.5.3.Final'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.azure.spring:spring-cloud-azure-starter-storage'
    implementation 'com.azure:azure-storage-blob-batch'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.liquibase:liquibase-core'
    implementation 'com.jayway.jsonpath:json-path:2.8.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation "org.mapstruct:mapstruct:${property('mapstructVersion')}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${property('mapstructVersion')}"
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-security'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.20.0'
    liquibaseRuntime 'info.picocli:picocli:4.7.1'
    liquibaseRuntime sourceSets.main.output
}

dependencyManagement {
    imports {
        mavenBom("com.azure.spring:spring-cloud-azure-dependencies:${property('springCloudAzureVersion')}")
    }
}

test {
    useJUnitPlatform()
}

Properties properties = new Properties()
File propertiesFile = new File('src/main/resources/application.properties')
propertiesFile.withInputStream {
    properties.load(it)
}

diff.dependsOn(compileJava)
diffChangelog.dependsOn(compileJava)
def logFile = 'src/main/resources/db/master.xml'

diffChangelog {
    doFirst {
        def db = new File('src/main/resources/db')
        def master = new File('src/main/resources/db/master.xml')
        if (!db.exists()) {
            db.mkdirs()
            if (!master.createNewFile()) {
                return
            }

            master.text =
                    '<?xml version=\'1.1\' encoding=\'UTF-8\' standalone=\'no\'?>\n' +
                            '<databaseChangeLog xmlns=\'http://www.liquibase.org/xml/ns/dbchangelog\'\n' +
                            '                   xmlns:ext=\'http://www.liquibase.org/xml/ns/dbchangelog-ext\'\n' +
                            '                   xmlns:xsi=\'http://www.w3.org/2001/XMLSchema-instance\'\n' +
                            '                   xsi:schemaLocation=\'http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd\'>\n' +
                            '</databaseChangeLog>'
        }

        def lines = master.readLines()
        def directory = new File('src/main/resources/db/evolution')
        def max = 0
        if (!directory.exists()) {
            directory.mkdirs()
        }
        def files = directory.listFiles()
        for (File file : files) {
            def index = file.getName().split('-')[0].toInteger()
            println file.length()
            if (file.length() == 0) {
                max = index - 1
                break
            }
            max = Math.max(max, index)
        }

        String[] url = properties['spring.datasource.url'].split('/')
        def logFileName = "${max + 1}-${url[url.size() - 1]}-changelog.xml"
        logFile = "src/main/resources/db/evolution/$logFileName"
        lines.add(lines.size() - 1, "\t<include file=\"./db/evolution/$logFileName\"/>")
        if (new File(logFile).createNewFile())
            master.text = lines.join('\n')

    }
}

changelogSync.dependsOn(update)

liquibase {
    activities {
        register('main') {
            changelogFile logFile
            url properties['spring.datasource.url']
            username properties['spring.datasource.username']
            password properties['spring.datasource.password']
            referenceUrl 'hibernate:spring:lb.store.ecommerce.common.entity' +
                    '?dialect=org.hibernate.dialect.PostgreSQLDialect' +
                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy' +
                    '&hibernate.implicit_naming_strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl' +
                    '&referenceDriver=org.postgresql.Driver'
        }
    }
}