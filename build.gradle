plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.liquibase.gradle' version '2.2.1'
    id 'jacoco'
}

group = 'com.ecommerce'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudAzureVersion', "5.8.0")
}

dependencies {
    implementation 'com.azure:azure-storage-blob-batch:12.21.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.azure.spring:spring-cloud-azure-starter-storage'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.6.0.Beta1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.mapstruct:mapstruct:1.6.0.Beta1'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0.Beta1'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-security'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'com.mysql:mysql-connector-j'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.25.0'
    liquibaseRuntime sourceSets.main.output
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'
}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}

Properties properties = new Properties()
File propertiesFile = new File('src/main/resources/application.properties')
propertiesFile.withInputStream {
    properties.load(it)
}


diff.dependsOn(compileJava)
diffChangelog.dependsOn(compileJava)
def logFile = 'src/main/resources/db/changelog/db.changelog-master.xml'
// Read variables from file

static def readVariables(LinkedHashMap<Object, Object> variables) {
    if (variables.isEmpty()) {
        def variableFile = new File('.env')

        variableFile.eachLine { line ->
            def (key, value) = line.split('=')
            variables[key.trim()] = value.trim()
        }
    }
    return variables;
}

def variables = [:]

def resolveVariables(String s, LinkedHashMap<Object, Object> variables) {
    def env = readVariables(variables)
    return s.replaceAll(/\$\{(\w+)\}/) { match ->
        env[match[1]]
    }
}

diffChangelog {
    doFirst {
        def db = new File('src/main/resources/db')
        def changelog = new File('src/main/resources/db/changelog')
        def master = new File('src/main/resources/db/changelog/db.changelog-master.xml')
        if (!db.exists())
            db.mkdirs()
        if (!changelog.exists()) {
            changelog.mkdirs()
            if (!master.createNewFile()) {
                return
            }

            master.text =
                    "<?xml version=\"1.1\" encoding=\"UTF-8\" standalone=\"no\"?>\n" +
                            "<databaseChangeLog xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n" +
                            "                   xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"\n" +
                            "                   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" +
                            "                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd\">\n" +
                            "</databaseChangeLog>"
        }

        def lines = master.readLines()
        def directory = new File("src/main/resources/db/changelog/evolution")
        def max = 0
        if (!directory.exists()) {
            directory.mkdirs()
        }
        def files = directory.listFiles()
        for (File file : files) {
            def index = file.getName().split('-')[0].toInteger()
            if (file.length() == 0) {
                max = index - 1
                break
            }
            max = Math.max(max, index)
        }

        String[] url = resolveVariables(properties["spring.datasource.url"] as String, variables).split("/")
        logFile = "src/main/resources/db/changelog/evolution/${(max + 1).toString().padLeft(3, '0')}-${url[url.size() - 1]}-changelog.xml"
        def logFileFinal = new File("src/main/resources/").toURI().relativize(new File(logFile).toURI()).getPath();
        lines.add(lines.size() - 1, "\t<include file=\"$logFileFinal\"/>")
        if (new File(logFile).createNewFile())
            master.text = lines.join("\n")

    }
}

changelogSync.dependsOn(update)

def dbUrl = resolveVariables(properties["spring.datasource.url"] as String, variables)
def dbUsername = resolveVariables(properties["spring.datasource.username"] as String, variables)
def dbPassword = resolveVariables(properties["spring.datasource.password"] as String, variables)
println dbUrl
println dbUsername
println dbPassword
liquibase {
    activities {
        register('main') {
            changelogFile logFile
            url "jdbc:mysql://localhost:3306/ecommerce"
            username "root"
            password "root"
            referenceUrl 'hibernate:spring:lb.store.ecommerce' +
                    '?dialect=org.hibernate.dialect.MySQLDialect' +
                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy' +
                    '&hibernate.implicit_naming_strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl' +
                    '&referenceDriver=com.mysql.cj.jdbc.Driver'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jacocoTestReport') {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}